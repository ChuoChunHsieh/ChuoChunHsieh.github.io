{"remainingRequest":"/Users/qiushunqun/Desktop/_謝卓君/ChuoChunHsieh/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/qiushunqun/Desktop/_謝卓君/ChuoChunHsieh/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/qiushunqun/Desktop/_謝卓君/ChuoChunHsieh/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/qiushunqun/Desktop/_謝卓君/ChuoChunHsieh/src/views/studyList_CASE1.vue?vue&type=template&id=d408c1c2&scoped=true&","dependencies":[{"path":"/Users/qiushunqun/Desktop/_謝卓君/ChuoChunHsieh/src/views/studyList_CASE1.vue","mtime":1653042832909},{"path":"/Users/qiushunqun/Desktop/_謝卓君/ChuoChunHsieh/node_modules/cache-loader/dist/cjs.js","mtime":1652859425000},{"path":"/Users/qiushunqun/Desktop/_謝卓君/ChuoChunHsieh/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1652859425000},{"path":"/Users/qiushunqun/Desktop/_謝卓君/ChuoChunHsieh/node_modules/cache-loader/dist/cjs.js","mtime":1652859425000},{"path":"/Users/qiushunqun/Desktop/_謝卓君/ChuoChunHsieh/node_modules/vue-loader/lib/index.js","mtime":1652859425000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}